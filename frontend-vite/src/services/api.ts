import axios from "axios"

// Configuration de l'API - Utilise le proxy Vite pour √©viter CORS
const API_BASE_URL = "/api"

// ‚úÖ Types pour les r√©ponses API
export interface LoginResponse {
  token: string
  user?: {
    id: string
    email: string
    roles: string[] // <-- corrig√©
  }
}

export interface ApiError {
  message: string
  errors?: Record<string, string[]>
}

// ‚úÖ Service d'authentification
export const authService = {
  async login(email: string, password: string): Promise<LoginResponse> {
    try {
      const response = await axios.post(`${API_BASE_URL}/login`, {
        email,
        password,
      })

      console.log("R√©ponse compl√®te :", response.data)

      const token = response.data.token
      if (!token) {
        throw new Error("Le serveur n'a pas renvoy√© de token.")
      }

      // Adapter la r√©ponse backend √† la structure frontend
      const role = response.data.role
      const roles = role ? [role] : []

      return {
        token,
        user: {
          id: response.data.id,
          email: email, // On utilise l'email de la requ√™te
          roles: roles, // Convertir le r√¥le unique en tableau
        }
      }
    } catch (err: any) {
      console.error("Erreur login :", err)

      if (err.response) {
        throw new Error(
          "Erreur serveur : " + (err.response.data.message || "Login √©chou√©")
        )
      } else if (err.request) {
        throw new Error("Le serveur ne r√©pond pas.")
      } else {
        throw new Error("Une erreur est survenue.")
      }
    }
  },

  logout(): void {
    localStorage.removeItem("token")
    localStorage.removeItem("user")

    const token = localStorage.getItem("token")
    if (token) {
      axios.post(`${API_BASE_URL}/logout`, {}, {
        headers: {
          "Authorization": `Bearer ${token}`,
        },
      }).catch(error => {
        console.log("Logout API non disponible:", error.message)
      })
    }
  },

  async getCurrentUser() {
    const token = localStorage.getItem("token")
    if (!token) {
      throw new Error("Pas de token")
    }

    try {
      const response = await axios.get(`${API_BASE_URL}/me`, {
        headers: {
          "Authorization": `Bearer ${token}`,
        },
      })
      return response.data
    } catch (error) {
      throw new Error("Token invalide")
    }
  }
}

// ‚úÖ Requ√™tes authentifi√©es
export const apiRequest = async (endpoint: string, options: any = {}) => {
  const token = localStorage.getItem("token")

  const config = {
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...(token && { "Authorization": `Bearer ${token}` }),
      ...options.headers,
    },
  }

  try {
    const response = await axios(`${API_BASE_URL}${endpoint}`, config)
    return response.data
  } catch (error: any) {
    if (error.response?.status === 401) {
      localStorage.removeItem("token")
      localStorage.removeItem("user")
      window.location.href = "/login"
      throw new Error("Session expir√©e")
    }

    throw new Error(error.response?.data?.message || "Erreur API")
  }
}

// ‚úÖ Service Chatbot pour envoyer les donn√©es au backend
export const chatbotService = {
  async savePatientData(patientData: any): Promise<any> {
    try {
      // Adapter les donn√©es du frontend au format attendu par le backend
      const backendData = {
        nom: patientData.nom || '',
        prenom: patientData.prenom || '',
        telephone: patientData.telephone || '',
        cin: patientData.cin || '',
        sexe: patientData.sexe || '',
        adresse: patientData.adresse || '',
        dateNaissance: patientData.date_naissance || '2000-01-01',
        symptomes: patientData.symptomes || '',
        antecedents: formatAntecedents(patientData),
        traitement: patientData.traitement || '',
        notes: formatNotes(patientData),
        // Assurer que medecin_id est un nombre ou null
        medecin_id: patientData.medecin_id ? Number(patientData.medecin_id) : null,
        // Assurer que specialite est une string ou null
        specialite: patientData.specialite || null,
      }

      console.log('üì§ Donn√©es envoy√©es au backend:', backendData)
      console.log('üîç D√©tail des champs:')
      Object.entries(backendData).forEach(([key, value]) => {
        console.log(`  ${key}:`, value, `(${typeof value})`)
      })

      const response = await axios.post(`${API_BASE_URL}/chatbot/patient`, backendData, {
        headers: {
          'Content-Type': 'application/json',
        }
      })

      console.log('R√©ponse du backend:', response)
      return response
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la sauvegarde des donn√©es patient:', error)

      if (error.response) {
        console.error('üìä Status:', error.response.status)
        console.error('üìã Headers:', error.response.headers)
        console.error('üì¶ Data:', error.response.data)

        // Erreur 500 = probl√®me serveur
        if (error.response.status === 500) {
          throw new Error(`Erreur serveur (500): ${error.response.data?.message || 'Erreur interne du serveur'}`)
        }

        // Erreur 400 = donn√©es invalides
        if (error.response.status === 400) {
          throw new Error(`Donn√©es invalides (400): ${error.response.data?.error || error.response.data?.message || 'Donn√©es incorrectes'}`)
        }

        throw new Error(`Erreur ${error.response.status}: ${error.response.data?.message || error.message}`)
      }

      throw new Error(error.message || 'Erreur lors de la sauvegarde')
    }
  }
}

// Fonctions utilitaires pour adapter les donn√©es

function formatAntecedents(patientData: any): string {
  const antecedents = []

  // V√©rifier tous les noms possibles pour les ant√©c√©dents m√©dicaux
  const antecedentsMedicaux = patientData.antecedentsMedicaux || patientData.antecedents_medicaux || patientData.antecedents || []
  if (Array.isArray(antecedentsMedicaux) && antecedentsMedicaux.length > 0) {
    antecedents.push(`Ant√©c√©dents m√©dicaux: ${antecedentsMedicaux.join(', ')}`)
  } else if (typeof antecedentsMedicaux === 'string' && antecedentsMedicaux.trim()) {
    antecedents.push(`Ant√©c√©dents m√©dicaux: ${antecedentsMedicaux}`)
  }

  // Ant√©c√©dents familiaux
  const antecedensFamiliaux = patientData.antecedensFamiliaux || patientData.antecedents_familiaux || []
  if (Array.isArray(antecedensFamiliaux) && antecedensFamiliaux.length > 0) {
    antecedents.push(`Ant√©c√©dents familiaux: ${antecedensFamiliaux.join(', ')}`)
  } else if (typeof antecedensFamiliaux === 'string' && antecedensFamiliaux.trim()) {
    antecedents.push(`Ant√©c√©dents familiaux: ${antecedensFamiliaux}`)
  }

  // Allergies
  const allergies = patientData.allergies || []
  if (Array.isArray(allergies) && allergies.length > 0) {
    antecedents.push(`Allergies: ${allergies.join(', ')}`)
  } else if (typeof allergies === 'string' && allergies.trim()) {
    antecedents.push(`Allergies: ${allergies}`)
  }

  console.log('üîç Formatage ant√©c√©dents:', {
    input: patientData,
    antecedentsMedicaux,
    antecedensFamiliaux,
    allergies,
    result: antecedents.join(' | ')
  })

  return antecedents.join(' | ')
}

function formatNotes(patientData: any): string {
  const notes = []

  if (patientData.dureeSymptomes) {
    notes.push(`Dur√©e des sympt√¥mes: ${patientData.dureeSymptomes}`)
  }

  if (patientData.intensiteDouleur) {
    notes.push(`Intensit√© douleur: ${patientData.intensiteDouleur}`)
  }

  if (patientData.autresInfos) {
    notes.push(`Autres informations: ${patientData.autresInfos}`)
  }

  return notes.join(' | ')
}

// Donn√©es de fallback en cas de probl√®me avec l'API
const FALLBACK_SPECIALITES = [
  { id: 1, nom: "Cardiologie", description: "Sp√©cialit√© m√©dicale qui traite les maladies du c≈ìur et des vaisseaux sanguins" },
  { id: 2, nom: "Dermatologie", description: "Sp√©cialit√© m√©dicale qui traite les maladies de la peau, des cheveux et des ongles" },
  { id: 3, nom: "Neurologie", description: "Sp√©cialit√© m√©dicale qui traite les maladies du syst√®me nerveux" },
  { id: 4, nom: "Orthop√©die", description: "Sp√©cialit√© m√©dicale qui traite les maladies de l'appareil locomoteur" },
  { id: 5, nom: "Gyn√©cologie", description: "Sp√©cialit√© m√©dicale qui traite les maladies de l'appareil g√©nital f√©minin" },
]

const FALLBACK_MEDECINS = [
  { id: 1, nom: "Martin", prenom: "Jean", email: "j.martin@hopital.fr", telephone: "01.23.45.67.89", specialite: { id: 1, nom: "Cardiologie" } },
  { id: 2, nom: "Dubois", prenom: "Marie", email: "m.dubois@hopital.fr", telephone: "01.23.45.67.90", specialite: { id: 1, nom: "Cardiologie" } },
  { id: 3, nom: "Leroy", prenom: "Pierre", email: "p.leroy@hopital.fr", telephone: "01.23.45.67.91", specialite: { id: 2, nom: "Dermatologie" } },
  { id: 4, nom: "Moreau", prenom: "Sophie", email: "s.moreau@hopital.fr", telephone: "01.23.45.67.92", specialite: { id: 2, nom: "Dermatologie" } },
  { id: 5, nom: "Petit", prenom: "Marc", email: "m.petit@hopital.fr", telephone: "01.23.45.67.93", specialite: { id: 3, nom: "Neurologie" } },
]

// ‚úÖ Service pour r√©cup√©rer les sp√©cialit√©s depuis le backend
export const specialiteService = {
  async getAll(): Promise<any[]> {
    try {
      console.log('Tentative de r√©cup√©ration des sp√©cialit√©s...')

      // Requ√™te directe vers le backend
      console.log('üöÄ Tentative de connexion directe au backend...')
      const response = await axios.get(`${API_BASE_URL}/specialites`)

      console.log('‚úÖ R√©ponse re√ßue!')
      console.log('üìä Status:', response.status)
      console.log('üì¶ Data:', response.data)
      console.log('üîç Type:', typeof response.data)
      console.log('üìè Longueur:', Array.isArray(response.data) ? response.data.length : 'N/A')

      // V√©rifier le format des donn√©es
      if (Array.isArray(response.data)) {
        console.log('üéØ Format tableau direct d√©tect√©')
        return response.data
      }

      // Format ApiPlatform avec "member"
      if (response.data && typeof response.data === 'object' && response.data.member) {
        console.log('üéØ Format ApiPlatform d√©tect√© avec "member"')
        console.log('üìã Sp√©cialit√©s trouv√©es:', response.data.member.length)
        return response.data.member
      }

      // Format ApiPlatform avec "hydra:member" (ancien format)
      if (response.data && typeof response.data === 'object' && response.data['hydra:member']) {
        console.log('üéØ Format ApiPlatform d√©tect√© avec "hydra:member"')
        return response.data['hydra:member']
      }

      console.log('‚ö†Ô∏è Format non reconnu, retour des donn√©es brutes')
      return response.data || []

    } catch (error: any) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des sp√©cialit√©s:', error)
      throw error
    }
  }
}

// ‚úÖ Service pour r√©cup√©rer les m√©decins depuis le backend
export const medecinService = {
  async getAll(): Promise<any[]> {
    try {
      console.log('üöÄ Tentative de r√©cup√©ration des m√©decins...')
      const response = await axios.get(`${API_BASE_URL}/medecins`)

      console.log('‚úÖ M√©decins r√©cup√©r√©s!')
      console.log('üì¶ Data:', response.data)

      // Format ApiPlatform avec "member"
      if (response.data && typeof response.data === 'object' && response.data.member) {
        console.log('üéØ Format ApiPlatform d√©tect√© pour m√©decins')
        console.log('üë®‚Äç‚öïÔ∏è M√©decins trouv√©s:', response.data.member.length)
        return response.data.member
      }

      // Format ApiPlatform avec "hydra:member" (ancien format)
      if (response.data && typeof response.data === 'object' && response.data['hydra:member']) {
        return response.data['hydra:member']
      }

      // Format tableau direct
      if (Array.isArray(response.data)) {
        return response.data
      }

      console.log('‚ö†Ô∏è Format m√©decins non reconnu')
      return response.data || []

    } catch (error: any) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des m√©decins:', error)
      throw error
    }
  },

  async getBySpecialite(specialiteId: number): Promise<any[]> {
    try {
      const allMedecins = await this.getAll()
      // Filtrer les m√©decins par sp√©cialit√©
      return allMedecins.filter(medecin =>
        medecin.specialite && medecin.specialite.id === specialiteId
      )
    } catch (error: any) {
      console.error('Erreur lors de la r√©cup√©ration des m√©decins par sp√©cialit√©:', error)
      // En cas d'erreur, filtrer les donn√©es de fallback
      return FALLBACK_MEDECINS.filter(medecin =>
        medecin.specialite && medecin.specialite.id === specialiteId
      )
    }
  }
}

// ‚úÖ Service pour cr√©er des rendez-vous via ApiPlatform
export const rendezVousService = {
  async createRendezVous(appointmentData: any, patientData: any): Promise<any> {
    try {
      console.log('üóìÔ∏è Cr√©ation du patient + rendez-vous via ApiPlatform...')
      console.log('üìã Donn√©es du patient re√ßues:', patientData)
      console.log('üìã Type de patientData:', typeof patientData)
      console.log('üìã Structure des cl√©s du patient:', Object.keys(patientData || {}))
      console.log('üìã Donn√©es du rendez-vous re√ßues:', appointmentData)

      // V√©rifier que patientData existe
      if (!patientData || typeof patientData !== 'object') {
        throw new Error('Aucune donn√©e patient trouv√©e. Veuillez d\'abord compl√©ter le questionnaire.')
      }

      // √âTAPE 1 : Adapter les donn√©es du chatbot au format attendu
      const adaptedPatientData = {
        nom: (patientData.nom_patient || patientData.nom || '').toString(),
        prenom: (patientData.prenom_patient || patientData.prenom || '').toString(),
        telephone: (patientData.telephone || patientData.phone || '').toString(),
        cin: (patientData.cin || patientData.carte_identite || '').toString(),
        sexe: (patientData.sexe || patientData.genre || '').toString(),
        adresse: (patientData.adresse || patientData.address || '').toString(),
        dateNaissance: (patientData.date_naissance || patientData.dateNaissance || '2000-01-01').toString(),
        symptomes: (patientData.symptomes || patientData.symptoms || '').toString(),
        specialite: (patientData.specialite || '').toString(),
        medecin_id: patientData.medecin_id || null
      }

      console.log('üîÑ Donn√©es adapt√©es pour le backend:', adaptedPatientData)

      // √âTAPE 2 : R√©cup√©rer le patient via l'endpoint /api/chatbot/patient
      console.log('üë§ R√©cup√©ration du patient via /api/chatbot/patient...')

      // Utiliser l'endpoint existant pour traiter les donn√©es patient et r√©cup√©rer l'ID
      const patientResponse = await axios.post(`${API_BASE_URL}/chatbot/patient`, adaptedPatientData, {
        headers: {
          'Content-Type': 'application/json',
        }
      })

      console.log('‚úÖ R√©ponse compl√®te du backend patient:', patientResponse.data)
      console.log('‚úÖ Structure des cl√©s de la r√©ponse:', Object.keys(patientResponse.data || {}))

      // R√©cup√©rer le patient_id de la r√©ponse
      const actualPatientId = patientResponse.data.patient_id || patientResponse.data.id
      if (!actualPatientId) {
        throw new Error('Aucun patient_id retourn√© par l\'endpoint /api/chatbot/patient')
      }
      console.log('üîë Patient ID r√©cup√©r√©:', actualPatientId)

      // √âTAPE 3 : Cr√©er le rendez-vous avec le patient_id obtenu
      console.log('üóìÔ∏è Cr√©ation du rendez-vous...')
      const apiData = {
        date: `${appointmentData.date}T${appointmentData.heure}:00`, // Format ISO DateTime
        motif: appointmentData.motif,
        statut: 'Confirm√©',
        disponible: false, // Le champ existe dans l'entit√© mais pas en DB
        // Relations ApiPlatform (IRI format) - Utiliser les IDs si disponibles
        patient: `/api/patients/${actualPatientId}`, // Patient obligatoire
        ...(appointmentData.medecinId && { medecin: `/api/medecins/${appointmentData.medecinId}` })
      }

      console.log('üì§ Donn√©es ApiPlatform pour le rendez-vous:', apiData)

      // URL correcte ApiPlatform pour RendezVous
      const response = await axios.post(`${API_BASE_URL}/rendez_vouses`, apiData, {
        headers: {
          'Content-Type': 'application/json',
        }
      })

      console.log('‚úÖ Rendez-vous cr√©√© avec succ√®s!')
      console.log('üì¶ R√©ponse ApiPlatform:', response.data)

      return {
        patient: patientResponse.data,
        rendezvous: response.data,
        message: 'Patient trait√© et rendez-vous cr√©√© avec succ√®s!'
      }

    } catch (error: any) {
      console.error('‚ùå Erreur lors de la cr√©ation du rendez-vous:', error)

      if (error.response) {
        console.error('üìä Status:', error.response.status)
        console.error('üì¶ Data:', error.response.data)

        // Erreurs ApiPlatform
        if (error.response.status === 400) {
          const violations = error.response.data?.violations || []
          const errorMessages = violations.map((v: any) => `${v.propertyPath}: ${v.message}`).join(', ')
          throw new Error(`Donn√©es invalides: ${errorMessages || error.response.data?.detail || 'Erreur de validation'}`)
        }

        if (error.response.status === 404) {
          throw new Error(`Ressource introuvable: ${error.response.data?.detail || 'Patient ou m√©decin introuvable'}`)
        }

        throw new Error(`Erreur ${error.response.status}: ${error.response.data?.detail || error.message}`)
      }

      throw new Error(error.message || 'Erreur lors de la cr√©ation du rendez-vous')
    }
  }
}
